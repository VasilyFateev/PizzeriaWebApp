// <auto-generated />
using DatabaseAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseAccess.Migrations
{
    [DbContext(typeof(AssortementDataContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModelClasses.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("product_category_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("ModelClasses.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("product_category");
                });

            modelBuilder.Entity("ModelClasses.ProductConfiguration", b =>
                {
                    b.Property<int>("ProductItemId")
                        .HasColumnType("integer")
                        .HasColumnName("product_item_id");

                    b.Property<int>("VariationOptionId")
                        .HasColumnType("integer")
                        .HasColumnName("variation_option_id");

                    b.HasKey("ProductItemId", "VariationOptionId");

                    b.HasIndex("VariationOptionId");

                    b.ToTable("product_configuration");
                });

            modelBuilder.Entity("ModelClasses.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CookingTime")
                        .HasColumnType("integer")
                        .HasColumnName("cooking_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_item");
                });

            modelBuilder.Entity("ModelClasses.Variation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("product_category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("variation");
                });

            modelBuilder.Entity("ModelClasses.VariationOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("VariationId")
                        .HasColumnType("integer")
                        .HasColumnName("variation_id");

                    b.HasKey("Id");

                    b.HasIndex("VariationId");

                    b.ToTable("variation_option");
                });

            modelBuilder.Entity("ModelClasses.Product", b =>
                {
                    b.HasOne("ModelClasses.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_product_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ModelClasses.ProductConfiguration", b =>
                {
                    b.HasOne("ModelClasses.ProductItem", "ProductItem")
                        .WithMany("Configurations")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_configuration_product_item_id");

                    b.HasOne("ModelClasses.VariationOption", "VariationOption")
                        .WithMany("Configurations")
                        .HasForeignKey("VariationOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_configuration_variation_option_id");

                    b.Navigation("ProductItem");

                    b.Navigation("VariationOption");
                });

            modelBuilder.Entity("ModelClasses.ProductItem", b =>
                {
                    b.HasOne("ModelClasses.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_item_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ModelClasses.Variation", b =>
                {
                    b.HasOne("ModelClasses.ProductCategory", "Category")
                        .WithMany("Variations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_variation_product_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ModelClasses.VariationOption", b =>
                {
                    b.HasOne("ModelClasses.Variation", "Variation")
                        .WithMany("VariationOptions")
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_variation_option_variation_id");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("ModelClasses.Product", b =>
                {
                    b.Navigation("ProductItems");
                });

            modelBuilder.Entity("ModelClasses.ProductCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Variations");
                });

            modelBuilder.Entity("ModelClasses.ProductItem", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("ModelClasses.Variation", b =>
                {
                    b.Navigation("VariationOptions");
                });

            modelBuilder.Entity("ModelClasses.VariationOption", b =>
                {
                    b.Navigation("Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
